//
//  Profile.swift
//  Salsette
//
//  Created by Marton Kerekes on 31/03/2017.
//  Copyright Â© 2017 Marton Kerekes. All rights reserved.
//

import UIKit
import FBSDKLoginKit
import Auth0
import DZNEmptyDataSet

class ProfileFeatureLauncher {
    
    static func configure(_ vc: ProfileViewController) {
        vc.interactor = ProfileInteractor(with: vc, graphManager: GraphManager.shared, auth0Manager: Auth0Manager.shared)
    }
}

class ProfileViewController: UITableViewController {

    enum ViewStates {
        case profilePicture(String)
        case displayName(String)
        case loading(Bool, String?, (() -> Void)?)
        case error(Error)
        case userReady(Bool)
    }

    @IBOutlet var loginBtn: FBSDKLoginButton!
    @IBOutlet var loginView: UIView!
    var interactor: ProfileInteractor?
    override func awakeFromNib() {
        super.awakeFromNib()
        ProfileFeatureLauncher.configure(self)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        loginBtn.loginBehavior = .systemAccount
        tableView.emptyDataSetDelegate = self
        tableView.emptyDataSetSource = self
        loginBtn.readPermissions = ["public_profile", "email", "user_friends", "user_events"]
        self.navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .refresh, target: self, action: #selector(deleteKeychain))
    }

    func deleteKeychain() {
        KeychainStorage.shared.clear()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.prepareView()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        interactor?.viewReady()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        interactor?.cancelFbRequest()
    }
    
    func set(viewState: ViewStates) {
        switch viewState {
        case .profilePicture(let pictureIdentifier):
            self.pictureIdentifier = pictureIdentifier
        case .displayName(let displayName):
            self.displayName = displayName
        case .loading(let value, let message, let completion):
            showLoading(value, message, completion)
        case .error(let error):
            showError(error)
        case .userReady(let isReady):
            userIsReady = isReady
            tableView.reloadData()
        }
    }

    fileprivate func showLoading(_ active: Bool, _ message: String?, _ completion: (() -> Void)?) {
        if active {
            self.present(UIAlertController.loadingAlert(with: message), animated: false, completion: completion)
        } else {
            self.dismiss(animated: false, completion: completion)
        }
    }

    private func showError(_ error: Error) {
        showLoading(false, nil, nil)
        self.present(UIAlertController.errorAlert(with: error), animated: false, completion: nil)
    }

    fileprivate var userIsReady: Bool = false
    fileprivate var displayName: String?
    fileprivate var pictureIdentifier: String?
}

extension ProfileViewController {

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return userIsReady ? 3 : 0
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: UserCellIdentifiers.allIdentifiers[indexPath.row])!

        switch indexPath.row {
        case 0:
            guard let imageCell = cell as? UserImageCell else { return cell }
            imageCell.profilePictureView?.profileID = pictureIdentifier
        case 1:
            guard let nameCell = cell as? UserNameCell else { return cell }
            nameCell.userNameLabel?.text = displayName
        default:
            ()
        }
        return cell
    }
}

extension ProfileViewController: DZNEmptyDataSetSource, DZNEmptyDataSetDelegate {

    func customView(forEmptyDataSet scrollView: UIScrollView!) -> UIView! {
        return loginView
    }
}

class ProfileInteractor {
    fileprivate weak var view: ProfileViewController!
    private var connection: FBSDKGraphRequestConnection?
    private var graphManager: GraphManager
    private var auth0Manager: Auth0Manager
    
    init(with view: ProfileViewController, graphManager: GraphManager, auth0Manager: Auth0Manager) {
        self.view = view
        self.graphManager = graphManager
        self.auth0Manager = auth0Manager
    }

    func prepareView() {
        guard FBSDKAccessToken.current() != nil else {
            //empty view
            return
        }
        //normal view
    }
    
    func viewReady() {
        facebookLogin()
    }
    
    func facebookLogin() {
        if let token = FBSDKAccessToken.current() {
            auth0SignIn(with: token.tokenString)
        } else {
            //user needs to log in by pressing the fb login btn
            view.set(viewState: .userReady(false))
        }
    }
    
    func scapholdLinkAccounts() {
        guard let token  = auth0Manager.auth0Token else {
            let signInerror = NSError(domain: "", code: 0, userInfo: [NSLocalizedDescriptionKey: "Couldn't sign in to scaphold"])
            view.set(viewState: .error(signInerror))
            return
        }
        if graphManager.isLoggedIn {
            facebookUser()
            return
        }
        view.set(viewState: .loading(true, "linking account...", nil))
        graphManager.createUser(with: token, closure: { [weak self] (success, error) in
            self?.view.set(viewState: .loading(false, nil, nil))
            guard let returnedError = error else {
                self?.facebookUser()
                return
            }
            self?.view.set(viewState: .error(returnedError))
        })
    }

    fileprivate func facebookUser() {
        let meRequest = FBSDKGraphRequest(graphPath: "me", parameters: ["fields":"name"])
        cancelFbRequest()
        view.set(viewState: .loading(true, "resolving user...", nil))
        connection = meRequest?.start(completionHandler: { [weak self] (connection, result, error) in
            self?.view.set(viewState: .loading(false, nil, nil))
            guard let returnedError = error else {
                self?.finalise(with: result)
                return
            }
            self?.view.set(viewState: .error(returnedError))
        })
    }
    
    func auth0SignIn(with tokenString: String) {
        if auth0Manager.isLoggedIn {
            scapholdLinkAccounts()
            return
        }
        view.set(viewState: .loading(true, "signing in...", nil))
        auth0Manager.auth0LoginUsingFacebook(token: tokenString) { [weak self] (success, error) in
            self?.view.set(viewState: .loading(false, nil, nil))
            guard let returnedError = error else {
                self?.scapholdLinkAccounts()
                return
            }
            self?.view.set(viewState: .error(returnedError))
        }
    }

    func cancelFbRequest() {
        if let existingConnection = connection {
            existingConnection.cancel()
        }
    }

    private func finalise(with result: Any?) {
        guard let data = result as? [String:Any], let name = JSON(data)["name"].string  else {
            let error = NSError(domain: "", code: 0, userInfo: [NSLocalizedDescriptionKey: "Couldn't get user information"])
            self.view.set(viewState: .error(error))
            return
        }
        view?.set(viewState: .displayName(name))
        view?.set(viewState: .profilePicture("me"))
        view?.set(viewState: .userReady(true))
    }
}

enum UserCellIdentifiers {
    static let imageIdentifier = "UserImageCell"
    static let nameIdentifier = "UserNameCell"
    static let eventIdentifier = "UserEventsCreationCell"

    static let allIdentifiers = [imageIdentifier, nameIdentifier, eventIdentifier]
}

class UserImageCell: UITableViewCell {
    @IBOutlet var profilePictureView: FBSDKProfilePictureView?
}

class UserNameCell: UITableViewCell {
    @IBOutlet var userNameLabel: UILabel?
}

class UserEventsCreationCell: UITableViewCell, SelectFacebookEventProtocol {
    @IBOutlet var eventCollectionView: UICollectionView?
    var items: [FacebookEventEntity]
    var interactor: SelectFacebookEventInteractor?

    func show(error: Error) {

    }
}


